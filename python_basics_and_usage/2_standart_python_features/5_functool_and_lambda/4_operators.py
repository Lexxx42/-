# Иногда возникает желание использовать некоторые стандартные операторы языка python
# именно в качестве функций.

# Например, мы бы хотели представить сумму, т.е. обычный знак +,
# в качестве функции, которая принимала бы два аргумента и возвращала бы их сумму.

# Для всего такого в языке python есть библиотека operator.

import operator as op

print(op.add(4, 5))
print(op.mul(4, 5))
print(op.contains([1, 2, 3], 4))  # 4 in [1,2,3]

# Однако пожалуй самыми интересными функциями в данной библиотеке являются itemgetter,
# который позволяет нам достать элемент какой-нибудь коллекции и attrgetter,
# который позволяет атрибут у какого-нибудь объекта.

x = [1, 2, 3]
f = op.itemgetter(1)  # f(x) == x[1] # Можно загнать строку (для словаря, например)
print(f(x))

x = {"123": 3}
f = op.itemgetter("123")
print(f(x))

# Конструктор attrgetter ведет себя почти подобным образом, но он пытается взять атрибут
# у объекта.

f = op.attrgetter("sort")  # f(x) == x.sort
print(f([]))

# Давайте вернемся к нашему примеру с именами и фамилиями.
# Давайте попробуем отсортировать наш список по последнему элементу в каждом кортеже.

x = [
    ("Guido", "van", "Rossum"),
    ("Heskel", "Hurry"),
    ("John", "Kelss")
]
x.sort(key=op.itemgetter(-1))
print(x)

# Иногда использовать операторы удобнее в качестве функций, для того чтобы передать
# их аргументом в какую-нибудь другую функцию.
# Если вы не хотите писать свою функцию сами сначала идите и проверьте библиотеку
# operator, наверняка она уже там реализована.
