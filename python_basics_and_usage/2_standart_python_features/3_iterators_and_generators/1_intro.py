# В этом уроке мы узнаем то, как python перебирает объекты множеств, как работает цикл for,
# зачем нам обязательно при этом использовать итераторы, как устроены генераторы и как
# писать свои собственные.

# Прежде всего, давайте с вами убедимся, что мы с вами понимаем, что будет делать
# цикл for, когда мы будем его использовать со стандартными типами языка python.

# Начнем со списка
lst = [1, 2, 3, 4, 5, 6]
book = {
    'title': "The Hitchhiker's Guide to the Galaxy",
    'author': "J. R. R. Tolkien",
    'year_published': 2003
}
string = "The Hitchhiker's Guide to the Galaxy is an American multination"

for i in book:
    print(i)

# Когда мы используем список в цикле for, мы перебираем элементы нашего списка.
# Если мы используем словарь в качестве объекта для перебора, то мы перебираем прежде всего ключи словаря.
# Если используем строку, то перебираем символы строки.

# Такое поведение цикла for кажется нам достаточно понятным, прежде всего мы бы хотели,
# чтобы цикл for перебирал элементы внутри множества.
# Именно это он и делает.

# Однако как интерпретатор узнает какие именно элементы лежат в множестве?
# Почему мы перебираем ключи для словаря, элементы внутри списка?

# Для этого в языке python есть итераторы.

# Концепция итераторов и итераций в языке python достаточно простая:
# если мы хотим перебирать элементы нашего какого-то объекта х с помощью
# цикла for, то необходимо чтобы у нашего объекта х был итератор.

# Итератор - это такой объект-перечислитель. Мы можем спросить у итератора какой элемент является
# следующим в объекте х и он должен будет его нам вернуть, а если элементы в объекте х
# уже кончились, то он должен будет бросить ошибку StopIteration.

# Таким оразом, если бы нашим объектом х был бы список: х = [1, 2], то у нас бы был
# объект Итератор для этого объекта х: iter(x).
# Мы могли бы у него спросить "какой объект следующий в х?" next?
# Он бы ответил 1.
# Мы бы снова его спросили "какой объект следующий в х?"
# Он бы ответил 2.
# А когда бы объекты в х уже кончились, мы бы спросили "какой объект следующий?"
# Он ответил нам тем, что объекты закончились. Бросив ошибку StopIteration

# Для того чтобы получить итератор объекта в языке python необходимо использовать
# функцию iter()
print('***\n')
iterator = iter(book)
print(next(iterator))
print(next(iterator))
print(next(iterator))
# print(next(iterator))  # StopIteration
# Чтобы спросить у итератора какой объект следующий, нужно использовать функцию next()

# Когда мы перебрали все объекты словаря, то следующий вызов некст() - бросает ошибку.

# На самом дели, именно таким образом и работает цикл for, когда мы перебираем элементы
# множества его помощью.
# Мы сначала просим итератор этого множества, и затем с помощью функции next() перебираем элементы.

# Таким образом, когда мы в коде исполняем итерирование с помощью цикла for элемента i,
# в нашем случае, в объекте book, происходит что-то похожее на следующее:

print("+++\n")
it = iter(book)
while True:
    try:
        i = next(it)
        print(i)
    except StopIteration:
        break

# Конечно синтаксически первая конструкция (цикл for) более простая, однако понимание того,
# что мы используем итератор и функцию next() для того, чтобы перебирать элементы,
# позволит нам в дальнейшем писать свои собственные итераторы для того,
# чтобы перебирать элементы наших собственных классов.
