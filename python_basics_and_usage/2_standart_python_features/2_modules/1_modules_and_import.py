# Очень часто возникает необходимость использовать функции, классы или переменные,
# которые мы объявили в одном файле внутри другого файла или внутри интерпретатора.
# Для этого в языке python есть система модулей и есть импорт.

# Давайте сразу попробуем импортировать тот код, который мы написали в предыдущем уроке.


import for_import

print(for_import.greet("Student"))
# Давайте разбираться что мы сделали.

# Прежде всего, что такое модуль?

# Мы поместили некоторое определение классов и функций внутрь файла for_import.py.
# Именно этот файл мы и называем модулем.
# Однако имя модуля - это имя файла без расширения, т.е. имя нашего модуля for_import.
# Таким образом, по сути, мы можем поместить любой код внутрь файла с расширением .py и
# затем его импортировать.

# Важно понимать, как происходит сам процесс импортирования.

# Когда мы пишем импорт и модуль, мы берем файл с модулем и целиком его исполняем.
# Те имена, которые останутся в пространстве имен связанными с исполнением этого модуля,
# мы затем и можем импортировать.

# Когда мы в коде пишем: import for_import
# То на самом деле берем, исполняем файл for_import.py.
# У нас останется 2 имени в глобальном неймспейсе, если мы исполняем именно этот файл.
# Мы запоминаем эти имена и объекты, которые им соответствуют.
# И затем они доступны в качестве атрибутов в нашем модуле for_import.

# Чтобы убедиться в том, что мы исполняем файл, когда его импортируем,
# давайте добавим в конец файла, который мы импортируем, какой-нибудь принт.

# Конечно же мы можем использовать импорт и в режиме работы в интерпретаторе.
# Заходишь в терминал в текущей папке.
# Команда ls -> показывает содержимое.
# Запускаешь интерпретатор: python3
# импортируешь модуль: import for_import
# чекаешь что там за объекты существуют: for_import.greet
