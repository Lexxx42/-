# Теперь давайте посмотрим, что же мы можем сделать с теми объектами, которые мы создали с помощью конструктора

# Давайте определим пустой класс
#
class Counter:
    pass
# пустое тело - для этого используем ключевое слово pass.
# Наш класс будет называться Counter и по смыслу он будет счетчиком
# В какой-то момент времени мы захотим его увеличивать и смотреть его текущее состояние
# и если что его обнулять

# Когда исполнится определение нашего класса Counter с именем Counter в глобальном неймспейсе
# будет связан объект в оперативной памяти.
# Этот объект соответствует классу, который мы только что создали
# и будет наш #Class Counter# - объект в оперативной памяти

# Если мы выведем на экран просто
# print(Counter) - мы увидим, что Counter - это class object

# давайте воспользуемся конструктором и создадим объект типа Counter


print(Counter)  # <class '__main__.Counter'>
Counter  # class object

# Пускай это будет объект х
x = Counter()  # x is instance object
# Если мы напишем print(x) - то увидим, что х - это так называемый instance object
# Пожалуй самый корректный перевод на русский - это экземпляр класса Counter
print(x)  # <__main__.Counter object at 0x0000028C71817610>
x.count = 0
x.count += 1

# Что же мы можем делать с экземплярами класса?
# Если для самого класса было верно, что мы можем вызвать от него конструктор
# и использовать атрибуты, т.е. присваивать новые или переиспользовать какие-то старые которые мы уже определили
# то для экземпляров класса верно только второе
# для экземпляров класса мы можем лишь пользоваться атрибутами

# и прежде всего нам надо понять, как создавать атрибуты

# когда мы пишем x = Counter()
# когда мы запускаем конструктор в оперативной памяти так же появляется объект для объекта экземпляра

# когда мы пишем x.count = 0
# мы создаем новый атрибут у нашего объекта instance т.е. объект экземпляра

# Важно понимать, что также как и с классом, с каждым инстансом/экземпляром нашего класса ассоциировано пространство имен




