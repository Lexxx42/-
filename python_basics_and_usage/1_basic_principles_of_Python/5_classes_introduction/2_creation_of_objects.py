# Мы посмотрели на синтаксис создания классов
# Однако намного интереснее как мы бы могли создавать объекты заданным типом
# или заданным классом

#  Нам был бы не очень интересен тип списка, если бы с помощью него мы бы не могли создавать списки
# Поэтому в языке Python предусмотрен механизм инсталлирования или конструктор

# Чтобы запустить конструктор класс и создать новый объект класса мы должны воспользоваться нашим классом
# как функцией и "вызвать" ее.

# Посмотрим на это:

class MyClass:
    a = 10

    def func(self):
        print('Hello')


x = MyClass()  # когда мы используем класс в качестве функции, создается новый объект класса MyClass - х
# В этом месте мы можем сказать, что мы вызвали конструктор класса MyClass и создали новый объект х
# Однако важно понимать, что конструктор классов есть только у тех классов, которые пишем мы
# Конструкторы есть также у встроенных классов языка python
print(type(x))  # <class '__main__.MyClass'>
print(type(MyClass))  # <class 'type'>
#
print(x.a)

# Мы можем сказать, что список lst это объект класса list используя конструктор класса
lst = list()
# Это эквивалентно записи
lst = []
# Не смотря на то, что в первом случае мы используем конструктор явно, а во втором пользуемся синтаксисом языка
# на самом деле, конструктор класса всегда выполняется, когда мы конструируем объект класса

# Более того, у любого класса в языке Python всегда есть конструктор
# и конструктор - это единственный механизм, которым создаются новые объекты.

# Вернемся к нашему объекту х
# Мы можем вывести тип икса и убедится в том, что его тип - это класс MyClass
# также мы можем вывести тип MyClass и убедится, что это класс type


# После того, как мы создали класс нам гарантируется всего 2 вещи:
# например MyClass
# 1. мы всегда можем вызвать его конструктор: MyClass()
# 2. мы можем обращаться к его атрибутам: MyClass.a
