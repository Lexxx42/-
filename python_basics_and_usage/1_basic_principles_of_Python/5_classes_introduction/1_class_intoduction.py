# Все данные в языке Python представлены объектами и отношениями между объектами
# и как мы помним, у любого объекта в языке Python есть тип
# Однако для того, чтобы решать конкретные задачи, которые перед нами стоят
# нам не всегда будет удобно только те типы, которые определены в языке Python

# для того, чтобы определить свои собственные типы в языке Python есть классы

# Классы в языке Python позволяют нам описать поведение объектов данного класса
# И что более важно - классы позволяют нам создать сами объекты данного класса
# таким образом классы в языке python - это механизм и синтаксис для описания своих типов данных

# Как же мы определяем класс
class MyClass:
    a = 10

    def func(self):
        print('Hello')

# имя класса -> тело класса
# В отличие от функций, тело класса исполняется в момент определения самого класса.
# более того, как же как у функции, для тела класса создается отдельный неймспейс
# и те имена, которые в этом неймспейсе остались затем закрепляются за объектом класса


# После того, как объявление класса исполнилось, создается объект на класс
print(type(MyClass))

# имена, которые остались в неймспейсе класса после его исполнения, закрепляются за объектом
# Что значит "закрепляются"?

# В нашем случае, во время исполнения тела класса, в нем остались объекты a и func
# Мы сможем достучаться до этих объектов написав
# MyClass.a
# MyClass.func

print(MyClass.a)
print(MyClass.func)
MyClass.func

# Правильно сказать, что они являются атрибутами этого класса
# а - это атрибут и func - это атрибут

# Неформально говоря, атрибут - это все то, к чему можно обратиться через .точку
# В нашем случа, MyClass.a означает, что мы хотим взять атрибут а у объекта MyClass
# а MyClass.func - что мы хотим взять атрибут func у объекта MyClass

# Однако говоря формально, атрибут - это какое-то имя внутри пространства имен,
# а точка . - это всего лишь наш синтаксис, чтобы обратиться конкретно к этому имени
