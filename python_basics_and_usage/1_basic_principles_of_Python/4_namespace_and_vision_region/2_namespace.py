# Стоит отметить, что пространство имен далеко не единственно
# У нас пространств имен и более того: каждый вызов функции сопровождается созданием нового пространства имен

# Однако обо всем по порядку
# Когда же создаются пространства имен?

# Первое пространство имен создается, когда мы запускаем интерпретатор
# Это пространство имен __builtins__, оно содержит в себе встроенные функции и классы
# Здесь мы найдем все стандартные типы: int, str, float bool
# Все функции стандартной библиотеки, которые есть: min(), max(), abs(), id() и т.д.

# Второе пространство имен, которое создается - это пространство имен main_test, оно является глобальным
# и содержит в себе те имена, которые объявили на самом верхнем уровне нашего кода.

# если бы мы объявили переменную а
a = 1

# Затем объявили бы функцию fun() и в ее теле объявили переменную х


def fun():
    # ...
    x = 1
    # ...
# На глобальном уровне мы объявили переменную а и мы объявили имя fun. Они и попадут в неймспейс main_test
# В то время, как х объявляется внутри функции и не попадет в неймспейс

# Прежде всего х не попадет в глобальный неймспейс потому что тело функции не исполняется, когда мы функцию определяем
# тело функции исполняется, когда мы функцию вызываем
# однако, когда мы вызовем функцию, х не будет лежать в глобальном неймспейсе, потому что каждый раз, когда мы вызываем
# функцию у нас будет создаваться локальный неймспейс.
