# идентификатор - это то, что позволяет нам в любой момент времени отличить один объект от другого
# потому что гарантируется, что никакие 2 объекта в один момент времени не обладают одинаковыми идентификатором.
# Поэтому идентификатор объекта не меняется с самого его создания

# Объект - абстракция для данных
# Данные - объекты и отношения между объектами
# Объект: идентификатор, тип и значение
# Идентификатор не может измениться

# Если интерпретатор встречает в коде число 14 для него это явный знак того, что нужно создать объект
# Если интерпретатор встречает в коде список [1,2,3] то сначала он создаст по каждому объекту для каждого элемента
# списка: 1, 2, 3, а затем он создаст объект для самого списка [1,2,3]
# По аналогии с другими типами данных

# Оператор присваивания
# х = 4
# имя = что-то (на важно что, это всегда будет объект)
# Оператор запоминает за именем переменной из левой части идентификатор объекта правой части

# Рассмотрим пример: х = 4
# В этом случае Python создаст объект для 4х, рассмотрит переменную х и запомнит соответствие
# переменной х и идентификатора только что созданного объекта

# В случает, когда в правой части находится другая переменная
# у = х
# Python сначала вспомнит, что х стоит соответствие идентификатора объекта 4
# и тогда он посмотрит идентификатор правой части
# и поставит соответствие переменной у идентификатору того же самого объекта 4

# вместо термина "соответствует идентификатору объекта" удем использовать термин "ссылается"
# х = 4
# мы говори, что переменная х ссылается на объект 4, который будет создан в памяти
# у = х
# у будет ссылаться на тот же объект, что и х

# Чтобы получить идентификатор существует функция id()

x = 4
print(id(x))  # 140721001583496
print(id(4))  # 140721001583496
y = x
print(id(y))  # 140721001583496
y = y ** 2
print(id(y))  # 140721001583880

a = [1, 2, 3]
print(id(a))  # 1989962118592
for i in a:
    print(id(i))
    # 140721007743784
    # 140721007743816
    # 140721007743848

# from stackoverflow
# переменные хранят только ссылки на объект
# оператор = присваивает переменной ссылку
# примитивные типы (литералы: числа, строки) с одинаковым значением представлены единственным объектом

X = 42
Y = 42
print(X == Y)  # True
print(X is Y)  # True но не обязан быть труЪ

x = [1, 2, 3]
print(id(x))  # 2873564928064
print(id([1, 2, 3]))  # 2873564977792
# 2 разных объекта имеют разные идентификаторы. Созданы на разных строчках в разное время

# оператор is сравнивает идентификаторы левой и правой частей

x = [1, 2, 3]
y = x
print(y is x)  # True
print(y is [1, 2, 3])  # false

# переменная в python - это всего лишь ссылка на объект
# и значение переменной это всегда значение объекта
# поэтому если несколько переменных ссылаются на один и тот же объект
# то их значения всегда будут совпадать

x = [1, 2, 3]
y = x
print(y is x)  # True
x.append(4)
print(x)  # [1, 2, 3, 4]
print(y)  # [1, 2, 3, 4]
print(type(id(x)))  # <class 'int'>
