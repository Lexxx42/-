# Функции примеры. Постараемся фиксировать все объекты, с которыми мы будем взаимодействовать

def list_sum(lst):
    result = 0
    for element in lst:
        result += element
    return result
# интерпретатор прочитает определение функции, увидит, где она заканчивается и создаст объект list_sum, который знает, что принимает 1 аргумент lst


def sum(a, b):
    return a+b
# Замен интерпретатор считает функцию sum, создаст для нее объект sum, и он знает, что он принимает a и b


# добавит объекты в памяти: 14, 29. Произойдет инициализация переменных: а ссылается на 14, б ссылается на 29
y = sum(14, 29)
# создастся объект суммы 43 и результат этой суммы будет ссылаться на него. И у в том числе будет ссылаться на него.
# в памяти объекты 1, 2, 3. Затем создать аргументы списка, который содержит ссылки на 1,2,3 (объект для списка)
z = list_sum([1, 2, 3])
# затем для result создать объект 0, если его не было
# Каждый раз для элемента result будет создаваться новый объект из-за оператора присваивания +=
# При этом у каждой переменной может быть только одна ссылка на объект
# z и результат функции будут ссылаться на объект 6
print(y)  # стоит не забывать, что функция print() - так же объект в оперативной памяти и этот объект создается каждый раз при запуске интерпретатора
print(z)
