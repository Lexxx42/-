# JSON - java script object notation.

# Несмотря на то, что данный формат раньше использовался для описания объектов,
# которые существуют в языке javascript, сейчас он является отдельным текстовым форматом,
# который используется во множестве приложений.

# В json мы описываем такие основные сущности как числа, строки, списки, объекты.
# Но объекты в javascript ведут себя также, как и в словаре.
# Они хранятся в парах ключ: значение.
# Также мы храним значения True, False, Null что является аналогом None в языке python.

# Отличия от словарей!
# Ключом в json объекте может быть только строка.
# Значения True, False пишутся с маленькой буквы. А значение None соответствует значение null.
# Так же строки мы можем объявить внутри двойных кавычек.

# Однако помимо таких мелочей в каждой сущности в json-е существует аналог в языке python.
# Именно поэтому нам очень удобно пользоваться данным форматом.

# Для того чтобы считывать и записывать данные в json формате,
# в языке python существует библиотека json.

import json

student1 = {
    "first_name": "Greg",
    "last_name": "Dean",
    "scores": [70, 80, 90],
    "description": "Good job, Greg",
    "certificate": True
}
student2 = {
    "first_name": "Will",
    "last_name": "Smith",
    "scores": [70, 80.2, 90],
    "description": "Nicely done",
    "certificate": True
}

data = [student1, student2]
print(data_json := json.dumps(data, indent=4, sort_keys=True))
with open("students.json", "w", encoding="utf-8") as f:
    json.dump(data, f, indent=4, sort_keys=True)

# Функция dumps() принимает первым аргументом объект языка python и возвращает
# соответствующее ему строковое представление в формате json.
# Также мы передали пару дополнительных аргументов.

# indent - количество отступов, которое нужно использовать в списках и словарях.
# Так же мы передали sort_keys, чтобы он отсортировал ключи словаря,
# которые попадаются в данном объекте.

# Чтобы записать как файл, можем использовать.

# Чтобы получить объект языка python соответствующий строковому представлению
# в формате json, мы можем использовать функцию loads().

print("***")
data_read = json.loads(data_json)
print(sum(data_read[0]["scores"]))

# Чтобы считать данные с файла в формате json, можем использовать функцию load(),
# в которую можно передать file object, открытый для чтения.

print("+++")
with open("students.json") as f:
    data_again = json.load(f)
    print(sum(data_again[1]["scores"]))

# Таким образом, json формат является простым для понимания людям, которые программирую на
# ЯП python.
# Просто потому что все сущности, которые мы объясняем с помощью json нотации также присутствуют
# в языке python и записываются аналогичным образом.
