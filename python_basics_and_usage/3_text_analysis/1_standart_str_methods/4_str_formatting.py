# Рассмотрим форматирование.

# Представьте, что у вас свадьба и вы хотите разослать приглашение своим гостям.
# В идеальном мире гостей у вас не так много и вы знаете каждого из них лично, поэтому
# вам не составит труда составить каждому из них пригласительное письмо и отправить его по почте.

# Однако, если гостей много данная процедура становится достаточно затруднительной.

# Вероятнее всего вы создадите один шаблон, где вы сможете указать имя вашего
# гостя и затем вы сможете отправить это письмо адресату.

# Именно процесс подстановки какого-то конкретного значения в достаточно
# общий шаблон мы и будем называть форматированием.

# Мы можем сказать что Лондон является столицей Великобритании,
# однако такая фраза является достаточно общей потому, что это верно для многих
# пар столица и государство.

# Мы можем сказать, что Белград является столицей Сербии и т.д.

# Поэтому из данной фразы мы можем сделать шаблон, куда мы затем будем подставлять
# значение столица-название государства.

capital = "London is the capital of Great Britain and Northern Ireland"
template = '{} is the capital of {}'

print(template.format("London", "GB"))
print(template.format("Vaduz", "Liechtenstein"))

# print(template.format.__doc__)
# format() принимает не ограниченное количество позиционных аргументов (*args)
# и неограниченное количество именованных аргументов (**kwargs).
# Если не указывать явно какие аргументы надо подставить, то format()
# будет заменять их в порядке записи в функцию.

# Однако мы можем явно указать порядок

print('***\n')
template = '{1} is the capital of {0}'

print(template.format("London", "GB"))
print(template.format("Vaduz", "Liechtenstein"))

# Можем использовать именованные аргументы

print('+++\n')
template = '{capital} is the capital of {country}'

print(template.format(capital="London", country="GB"))
print(template.format(country="Liechtenstein", capital="Vaduz"))

# Мы можем сделать еще круче!
# Благодаря форматированию в языке python мы можем обращаться к атрибутам объектов,
# которые мы передали.
# В данном случае мы хотим передавать response внутри нашего шаблона и говорить,
# что мы получили ответ от адреса, который мы достанем с помощью атрибута
# url со статусом, который мы так же достанем с помощью атрибута status_code.

import requests

template = "Response from {0.url} with code {0.status_code}"

res = requests.get("https://docs.python.org/3.11/")
print(template.format(res))
# Response from https://docs.python.org/3.11/ with code 200

res = requests.get("https://docs.python.org/3.11/random")
print(template.format(res))
# Response from https://docs.python.org/3.11/random with code 404

# Мы увидим строковое представление двух наших запросов.
# Мы получили ответ от страницы https://docs.python.org/3.11/ со статус-кодом 200,
# потому что данная страница существует и она доступна.

# Более того, мы можем использовать метод format(), используя специальный синтаксис.
# Указываем, что нас интересует только 3 знака после запятой в нашем числе.

from random import random

x = random()
print(x)
print("{:.3}".format(x))

# Тогда, когда мы будем брать случайное число из диапазона (0, 1), то мы действительно
# округлим его с точностью до 3-х знаков после запятой.

# В рамках данного шага мы рассмотрели лишь часть синтаксиса, который мы можем использовать
# для форматирования благодаря методу format().

# Например, наподобие того, как мы получали атрибуты внутри нашего шаблона
# можно получать также элементы списка или значения словаря.

# Вообще в синтаксисе форматирования языка python для наших строк очень много фишек,
# которые можно использовать.
