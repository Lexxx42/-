# Прежде всего импортируем модуль re.
# Это модуль стандартной библиотеки языка python поэтому не нужно устанавливать.
import re

print(re.match)
print(re.search)
print(re.findall)
print(re.sub)

# Что же делают эти функции?

# match() - берет наш шаблон, нашу строку и проверяет, подходит ли данная строка
# под данный шаблон.

# search() - находит первую строку, которая подходит под наш шаблон.

# findall() - будет находить все подстроки нашей строки, которые подходят под данный шаблон.

# sub() - позволит заменить нам все вхождения подстрок, которые подходят под наш шаблон
# чем-нибудь другим.

# Регулярное выражение будет записывать наш шаблон, поэтому часто регулярное выражение = шаблон
# и наоборот.

# Внутри нашего шаблона могут быть обычные символы, под которые могут подходить обычные символы.
# Например, строка "фыв" подходит под шаблон "фыв".

# А так же могут быть метасимволы, которые будут описывать что-нибудь интересное.

print("***")

pattern = r"abc"
string = "abc"
match_object = re.match(pattern, string)
print(match_object)  # <re.Match object; span=(0, 3), match='abc'>
# Функция match() берет строку и бежит с самого начала строки до тех пор, пока какой-нибудь
# префикс нашей строки не подошел под данное регулярное выражение, а как только
# его находит, то возвращает его в качестве match.

# Таким образом, если удлинить нашу строку до abcd
print("+++")

pattern = r"abc"
string = "abcd"
match_object = re.match(pattern, string)  # <re.Match object; span=(0, 3), match='abc'>
print(match_object)

# Изменим на структуру, которая не подходит под наш паттерн

print("!!!")

pattern = r"abc"
string = "accd"
match_object = re.match(pattern, string)
print(match_object)  # None

pattern = r"abc"
string = "babc"
match_object = re.match(pattern, string)
print(match_object)  # None

# Можем использовать функцию search()

print("@@@")

pattern = r"abc"
string = "babc"
match_object = re.search(pattern, string)
print(match_object)  # <re.Match object; span=(1, 4), match='abc'>

# Те числа, которые вернулись нам внутри span -- это те же самые числа,
# которые мы бы использовали при слайсинге.

s = "babc"
print(s[1:4])

# Попробуем изучить первую пару метасимволов - [] квадратные скобки,
# в которые мы можем указать то множество символов, которое под шаблон подходит.

print("$$$")

pattern = r"a[abc]c"  # Вторым символом нашей строки может быть любой символ из списка: a, b, c
# string = "abc"  # <re.Match object; span=(0, 3), match='abc'>
# string = "aac"  # <re.Match object; span=(0, 3), match='aac'>
string = "acc"  # <re.Match object; span=(0, 3), match='acc'>
match_object = re.match(pattern, string)
print(match_object)

# Таким образом мы очень просто расширили список строк, который подходит под наш шаблон.
# Мы просто явно указали, что вторым символом нашей строки может являться как символ a, так и символ b
# и c.

# Таким образом метасимволы позволяют расширять то множество строк, которое подходит под наш
# шаблон.

print("///")
string = "abc, acc, aac"
all_inclusions = re.findall(pattern, string)
print(match_object)

fixed_typos = re.sub(pattern, "abc", string)
print(fixed_typos)

# Таким образом, функции findall() и sub() позволяют нам найти все вхождения нашего шаблона
# внутри нашего текста.

# Если функция findall() просто возвращает те строки, которые подошли под шаблон.
# То функция sub() на месте заменяет эти строки на нечто другое.

# Таким образом, с помощью этих функций можем осуществлять поиск шаблона внутри строки большого текста.
# Следующие уроки будут по другим метасимволам и как их правильно применять
