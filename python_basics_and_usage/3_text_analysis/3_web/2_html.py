# Стоит поговорить о том, что такое html.

# html - hyper text markup language - язык разметки гипертекста.

# Язык разметки гипертекста используется, прежде всего, для составления веб страниц.

# Прежде всего, любой html документ является текстовым, т.е мы можем его редактировать в качестве
# текста и в качестве текста интерпретировать.

# Но чаще всего html документы интерпретируются именно браузерами и благодаря
# тегам, с помощью которых мы размечаем данный документ, браузер принимает решение
# как должен выглядеть данный элемент или где он должен находиться.

# Если мы с вами откроем официальную страницу языка Python версии 3.5.1 с документацией,
# то мы увидим некоторое количество информации, которая достаточно аккуратно распределена по всей
# странице браузера.
# Навигация слева, контент со ссылками.

# На самом деле html документ определяет то, как выглядит вся наша страница именно в браузере.
# Мы можем посмотреть исходный код нашего документа, который соответствует html документу.
# View page source.

# Увидим html документ.

# Таким образом, когда мы вбили адрес данной страницы в нашем браузере, произошел http запрос
# GET, который запросил данную страницу.
# В теле нашего ответа на данный запрос мы получили данный html документ.

# Поведение текста и других элементов html документа в нашем браузере зависит
# прежде всего от тегов.

# Тегов в html достаточно много, однако для того, чтобы искать информацию
# внутри нашего html документа нам необязательно знать все из них.

# Если вернемся к странице с документацией, то наш заголовок "Python 3.5.1 documentation"
# мы можем найти внутри html документа, он является заголовком там потому что заключен
# внутри тега <h1> </h1>, который предназначен для заголовка в языке html.

# Однако куда более важно, что любую информация на странице мы можем найти внутри html документа.

# А раз вся информация, которая доступна на странице доступна также и в html коде,
# то на самом деле нем вовсе не обязательно знать все html теги,
# для того, чтобы искать информацию.

# Предположим, что мы хотим найти все телефоны и все e-mail адреса на данной странице.

# Тогда нам достаточно правильно написать два регулярных выражения, под которые подходили
# только телефоны и емейлы.
# Скормить данным регуляркам нашу html страницу и мы в шоколаде.

# Однако, если бы мы хотели найти все ссылки на данной странице, то нам бы пришлось немного
# разобраться в html и узнать, как работает ровно 1 тег.
# Это тег <a>.

# Предположим, что на какой-нибудь странице мы бы хотели разглядеть ссылку на данный курс.
# Как бы мы это сделали?

# <a .. href="https://stepic.org/512"> Python: основы и применение </a>
# Мы бы использовали тег <a>, затем указали бы обязательно href (гиперссылка - hyper reference),
# указали бы строку - URL курса, указали бы текст, который отображался по ссылке внутри документа,
# затем закрыли тег <a>.

# Даже такого базового знания о теге <a> нам хватило, для того чтобы написать регулярное
# выражение, которое нашло все ссылки в данном html документе.
