# Запросы в языке python.

# Пользоваться requests очень удобно.
# Нужно выбрать метод с которым мы хотим обратиться, ресурс, который мы хотим получить или изменить,
# пару дополнительных параметров.
# Библиотека сама сформирует за нас запрос и отправит его на сервер, получит с сервера ответ,
# разберет ответ.
# И мы можем получить нужные нам детали ответа с помощью атрибутов.

import requests

res = requests.get("https://docs.python.org/3.11/")
print(res.status_code)  # 200
print(res.headers['Content-Type'])  # text/html

# Функция get() из модуля requests возвращает нам response object.
# Response - это класс, который описан внутри библиотеки requests и он содержит в себе описание ответа сервера.
# В качестве атрибутов нам доступны статус-коды, хэдеры, которые нам передали, и в том числе содержимое
# самого ресурса.

# Чтобы получить тело нашего ответа и все содержимое, которое есть в ресурсе, что мы запросили.
# Мы можем использовать:

print(res.content)
# Можно увидеть, что ответ представляет собой бинарные данные.
# Это связано с тем, что мы можем использовать http протокол не только для передачи текстовой информации.
# А для передачи например изображений, музыки и любой другой информации.
# Поэтому контент по умолчанию является бинарными данными.

# Однако если мы уверены, что ресурс который мы запрашиваем - это текстовые данные,
# то можем явно использовать атрибут text.

print(res.text)

# Однако, если вы хотите запросить не текстовые данные, а например, иконку в верхнем левом углу,
# можно скопировать путь к картинке внутрь функции get().

res = requests.get("https://docs.python.org/3.11/_static/py.png")
print(res.status_code)
print(res.headers['Content-Type'])

print(res.content)

# Нам ничего не стоит сохранить полученную бинарную информацию в файл.

with open("image.png", "wb") as f:
    f.write(res.content)

# Также у некоторых ресурсов у вас есть возможность указать некоторые параметры,
# которые нужны для получения информации.

# Например, если ресурсом является поисковик (гугл или яндекс), можно указать свой запрос в качестве параметра.

# Эти параметры также являются частью нашего URL.
# Сразу после протокола, домена и конкретного ресурса.
# Указываем после ?/param=value
# параметр идет со значением.

"https://yandex.ru/search/text=Stepic"

# Важно понимать, что имена параметров, которые мы можем передать в качестве URL
# зависят от ресурса, который их принимает и от домена.
# Т.е. то что мы передавали в качестве параметра text зависит лишь от яндекса.

# Например, поисковик гугл для запросов использует другое имя параметра.

res = requests.get("https://yandex.ru/search/", params={"text": "Stepic"})
print(res.status_code)
print(res.headers['Content-Type'])
print(res.url)
print(res.text)

# Попробуем передать словарь побольше.

res = requests.get("https://yandex.ru/search/",
                   params={
                       "text": "Stepic",
                       "test": "test1",
                       "name": "Name with spaces",
                       "list": ["test1", "test2"]
                   })
print(res.status_code)
print(res.headers['Content-Type'])
print(res.url)
print(res.text)
# https://yandex.ru/search/?text=Stepic&test=test1&name=Name+with+spaces&list=test1&list=test2&lr=20678&redircnt=1674628657.1

# Параметры передаются по достаточно интересным правилам.
# Пары ключ:значение добавляются по порядку и соединяются между собой амперсандом.
# А когда мы добавляем лист, то они добавляются парами.
# Также в URL не допустимы пробелы, поэтому вместо них используются +.
# Поэтому я рекомендую не составлять такие запросы самим, а доверять библиотеке.

# Также в библиотеке request реализованы методы POST и все остальные методы http запросов,
# которые поддерживаются протоколом.
